<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Machine learning on greaysweater42&#39;s cookbook</title>
    <link>https://greysweater42.github.io/categories/machine-learning/</link>
    <description>Recent content in Machine learning on greaysweater42&#39;s cookbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 31 Aug 2021 18:32:03 +0200</lastBuildDate>
    
	<atom:link href="https://greysweater42.github.io/categories/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PCA / SVD</title>
      <link>https://greysweater42.github.io/pca/</link>
      <pubDate>Tue, 31 Aug 2021 18:32:03 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/pca/</guid>
      <description>1. What ic PCA and why do we care? PCA stands for Principal Component Analysis and is a clever linear transformation, which usually serves the following purposes:
  dimenstionality reduction (in case of tabular data and text processing)
  noise reduction (in image and signal preprocessing)
  It is worth mentioning that SVD (Singular Value Decomposition) is a generalization of PCA, so in practice these are exactly the same methods.</description>
    </item>
    
    <item>
      <title>keras</title>
      <link>https://greysweater42.github.io/keras/</link>
      <pubDate>Thu, 08 Apr 2021 18:19:38 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/keras/</guid>
      <description>1. What is keras and why would you still use pytorch?   Just kidding with pytorch ;) but still you will have to choose between these two (or even more) frameworks at the very early stage of the analysis.
  Keras is a high-level framework for working with neural networks, written in Python and capable of running on top of either TensorFlow, Microsoft Cognitive Toolkit (CNTK) or Theano</description>
    </item>
    
    <item>
      <title>fastai</title>
      <link>https://greysweater42.github.io/fastai/</link>
      <pubDate>Wed, 03 Mar 2021 18:26:08 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/fastai/</guid>
      <description>1. What is fastai and why would you care? It is a deep learning framework built on top of pytorch, which facilitates some frequently used tasks, e.g.:
  you can train your model in one line of code (and it works really well)
  you can easily view your dataset, which is particularly useful when working with images
  you can easily check where the model had the biggest errors.</description>
    </item>
    
    <item>
      <title>pytorch</title>
      <link>https://greysweater42.github.io/pytorch/</link>
      <pubDate>Wed, 17 Feb 2021 16:13:51 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/pytorch/</guid>
      <description>1. What is pytorch and why is it interesting?   Pytorch is one of the most popular artificial neural network python packages, used mainly for deep learning.
  Comparing to other NN frameworks, pytorch:
  makes using CUDA trivial
  has excellent abstractions for working with neural networks (dataset, dataloader, nn.Module)
  works well with Tensorboard
    2. A typical NN structure Pytorch NN scripts share a very similar structure: many models used in production environment are even almost exactly the same.</description>
    </item>
    
    <item>
      <title>XAI</title>
      <link>https://greysweater42.github.io/xai/</link>
      <pubDate>Sun, 22 Nov 2020 12:38:18 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/xai/</guid>
      <description>1. Why even bother explaining machine learning models?   users will trust the model which explains their decisions not only because of this
  you will gain insight on whether the model will perform well on new data, e.g. you may find out that the decision if a photo depicts a husky or a dachshund is based not on features of a dog but on snow that lays all around.</description>
    </item>
    
    <item>
      <title>xgboost</title>
      <link>https://greysweater42.github.io/xgboost/</link>
      <pubDate>Sat, 14 Nov 2020 13:34:53 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/xgboost/</guid>
      <description>1. What is XGBoost and why would you use it?   xgboost is one of the most popular supervised learning algorithms
  it&amp;rsquo;s popularity results from a few factors:
  it&amp;rsquo;s easy to use
  is available in R and Python, with sklearn api
  usually performs very well even on default hyperparameters
  is resilient to missing values and ourliers
  provides excellect results</description>
    </item>
    
    <item>
      <title>learning tensorflow</title>
      <link>https://greysweater42.github.io/learning_tensorflow/</link>
      <pubDate>Mon, 05 Aug 2019 18:45:18 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/learning_tensorflow/</guid>
      <description>The best way to gain intuiton to any new thing you learn is to start from a very beginning and play with it (let&amp;rsquo;s see what happens if I do this). That&amp;rsquo;s the power of reinforcement learning ;)
These packages will be useful in the nearest future:
import numpy as np from sklearn.datasets import load_iris from sklearn.linear_model import LinearRegression from sklearn.preprocessing import OneHotEncoder from sklearn.metrics import accuracy_score import tensorflow as tf A trivial example of tensorflow:</description>
    </item>
    
    <item>
      <title>basic machine learning algorithms</title>
      <link>https://greysweater42.github.io/ml/</link>
      <pubDate>Mon, 22 Apr 2019 18:05:21 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/ml/</guid>
      <description>1. What is machine learning and why would you use it?   it&amp;rsquo;s a rather complicated, yet beautiful tool for boldly going where no man has gone before.
  in other words, it enables you to extract valuable information from data.
  2. Examples of the most popular machine learning algorithms in Python and R We&amp;rsquo;ll be working on iris dataset, which is easily available in Python (from sklearn import datasets; datasets.</description>
    </item>
    
    <item>
      <title>pytorch basics</title>
      <link>https://greysweater42.github.io/pytorch_basics/</link>
      <pubDate>Sun, 06 Jan 2019 17:44:32 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/pytorch_basics/</guid>
      <description>1. What is pytorch and why would you use it?   pytorch is a python package which makes learning deep neaural networks relatively easy and fast
  it&amp;rsquo;s main &amp;ldquo;rival&amp;rdquo; is tensorflow, as pytorch was released by Facebook, but tensorflow by Google
  More on pytorch you will find in this post.
2. &amp;ldquo;Hello world&amp;rdquo; example  inspired by this article
  using pytorch version x.xx</description>
    </item>
    
    <item>
      <title>tensorflow</title>
      <link>https://greysweater42.github.io/tensorflow/</link>
      <pubDate>Tue, 01 Jan 2019 18:17:38 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/tensorflow/</guid>
      <description>1. What is tensorflow and why would you use it?   tensorflow is a machine learning framework
  which has APIs to Python, C++ and R
  and let&amp;rsquo;s you evaluate any machine learning algorithm, especially deep learning:
  quickly (all the computations are performed in C++)
  easily - you can view your results in a GUI - Tensorboard
  on a huge amount of data, as tensorflow scales easily to many machines and can even make use of GPU.</description>
    </item>
    
    <item>
      <title>nlp</title>
      <link>https://greysweater42.github.io/nlp/</link>
      <pubDate>Sun, 23 Dec 2018 15:44:02 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/nlp/</guid>
      <description>1. What is nlp and why should you care?   NLP or natural language processing (not neuro-linguistic programming. This disambiguation makes searching on the internet a real pain) is a group of methods/algorithms that deal with text data. Sounds like text mining? The former concentrates more on predictive modeling, while the latter on exploratory data analysis. In practice some of the algorithms may be used both for prediction and exploration (LDA, for example).</description>
    </item>
    
  </channel>
</rss>