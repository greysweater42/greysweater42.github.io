<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on greaysweater42&#39;s cookbook</title>
    <link>https://greysweater42.github.io/categories/python/</link>
    <description>Recent content in Python on greaysweater42&#39;s cookbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 23 May 2024 12:46:59 +0200</lastBuildDate>
    
	<atom:link href="https://greysweater42.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>delta table</title>
      <link>https://greysweater42.github.io/delta_table/</link>
      <pubDate>Thu, 23 May 2024 12:46:59 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/delta_table/</guid>
      <description>Why would you use delta table? When you work on huge amounts of data, you probably use spark as querying engine and store data either in spark on in a cloud storage (S3 / Google Cloud Storage / Azure Storage), which together nring architecure called data lake.
Vast amounts of data are still in tabular format, so you may feel tempted to store them in a data warehouse, because of its nice features, like ACID and locking.</description>
    </item>
    
    <item>
      <title>pillow</title>
      <link>https://greysweater42.github.io/pillow/</link>
      <pubDate>Wed, 10 Nov 2021 16:04:17 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/pillow/</guid>
      <description>1. What is pillow and why would you use it? Pillow is a Python package for working with images. It is invaluable for working with image datasets, but personally I find its API rather hard to remember, so here I present a few of the most popular applications of pillow for machine learning.
A quick note on installation:
pip install pillow 2. Applications a) displaying an image in a VSCode interactive session  IMHO VSCode provides the best environment for data scientists at the moment.</description>
    </item>
    
    <item>
      <title>async/threads</title>
      <link>https://greysweater42.github.io/async_thread/</link>
      <pubDate>Wed, 29 Sep 2021 00:14:48 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/async_thread/</guid>
      <description>1. What does &amp;ldquo;asynchronous&amp;rdquo; and &amp;ldquo;threading&amp;rdquo; mean and why is it important? Let&amp;rsquo;s begin with the definition of processes and threads provided Gerald of Stackoverflow:
 A process is a collection of code, memory, data and other resources. A thread is a sequence of code that is executed within the scope of the process. You can (usually) have multiple threads executing concurrently within the same process.
 Asynchrounous usually refers to using many processes, while threading - many threads within one process.</description>
    </item>
    
    <item>
      <title>keras</title>
      <link>https://greysweater42.github.io/keras/</link>
      <pubDate>Thu, 08 Apr 2021 18:19:38 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/keras/</guid>
      <description>1. What is keras and why would you still use pytorch?   Just kidding with pytorch ;) but still you will have to choose between these two (or even more) frameworks at the very early stage of the analysis.
  Keras is a high-level framework for working with neural networks, written in Python and capable of running on top of either TensorFlow, Microsoft Cognitive Toolkit (CNTK) or Theano.</description>
    </item>
    
    <item>
      <title>fastai</title>
      <link>https://greysweater42.github.io/fastai/</link>
      <pubDate>Wed, 03 Mar 2021 18:26:08 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/fastai/</guid>
      <description>1. What is fastai and why would you care? It is a deep learning framework built on top of pytorch, which facilitates some frequently used tasks, e.g.:
  you can train your model in one line of code (and it works really well)
  you can easily view your dataset, which is particularly useful when working with images
  you can easily check where the model had the biggest errors.</description>
    </item>
    
    <item>
      <title>pytorch</title>
      <link>https://greysweater42.github.io/pytorch/</link>
      <pubDate>Wed, 17 Feb 2021 16:13:51 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/pytorch/</guid>
      <description>1. What is pytorch and why is it interesting?   Pytorch is one of the most popular artificial neural network python packages, used mainly for deep learning.
  Comparing to other NN frameworks, pytorch:
  makes using CUDA trivial
  has excellent abstractions for working with neural networks (dataset, dataloader, nn.Module)
  works well with Tensorboard
    2. A typical NN structure Pytorch NN scripts share a very similar structure: many models used in production environment are even almost exactly the same.</description>
    </item>
    
    <item>
      <title>beautiful soup</title>
      <link>https://greysweater42.github.io/beautiful_soup/</link>
      <pubDate>Fri, 11 Oct 2019 19:38:20 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/beautiful_soup/</guid>
      <description>1. What is beautiful soup and why would you use it?   it&amp;rsquo;s a web scraping Python package
  sometimes your data is allocated on various pages on the internet. Beautiful Soup turns out to be super-helpful in automated collecting of this sort of data.
  btw. I love the name. It sounds so randomly.
2. The basics Beautiful Soup can &amp;ldquo;understand&amp;rdquo; html code, which you download from the internet using requests module:</description>
    </item>
    
    <item>
      <title>learning tensorflow</title>
      <link>https://greysweater42.github.io/learning_tensorflow/</link>
      <pubDate>Mon, 05 Aug 2019 18:45:18 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/learning_tensorflow/</guid>
      <description>The best way to gain intuiton to any new thing you learn is to start from a very beginning and play with it (let&amp;rsquo;s see what happens if I do this). That&amp;rsquo;s the power of reinforcement learning ;)
These packages will be useful in the nearest future:
import numpy as np from sklearn.datasets import load_iris from sklearn.linear_model import LinearRegression from sklearn.preprocessing import OneHotEncoder from sklearn.metrics import accuracy_score import tensorflow as tf A trivial example of tensorflow:</description>
    </item>
    
    <item>
      <title>pandas</title>
      <link>https://greysweater42.github.io/pandas/</link>
      <pubDate>Fri, 25 Jan 2019 13:46:12 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/pandas/</guid>
      <description>1. What is pandas and why would you use it?  pandas is probably your first choice for working with tabular data in Python. True, there is also datatable, but itâ€™s nowhere near as popular as pandas.
 Effectively it is the only reasonable Python package for this purpose, which makes Python a little modest comparing to R (base, data.table, dplyr - every one of them has a better interface than pandas) for table processing.</description>
    </item>
    
    <item>
      <title>pytorch basics</title>
      <link>https://greysweater42.github.io/pytorch_basics/</link>
      <pubDate>Sun, 06 Jan 2019 17:44:32 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/pytorch_basics/</guid>
      <description>1. What is pytorch and why would you use it?   pytorch is a python package which makes learning deep neaural networks relatively easy and fast
  it&amp;rsquo;s main &amp;ldquo;rival&amp;rdquo; is tensorflow, as pytorch was released by Facebook, but tensorflow by Google
  More on pytorch you will find in this post.
2. &amp;ldquo;Hello world&amp;rdquo; example  inspired by this article
  using pytorch version x.xx</description>
    </item>
    
    <item>
      <title>tensorflow</title>
      <link>https://greysweater42.github.io/tensorflow/</link>
      <pubDate>Tue, 01 Jan 2019 18:17:38 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/tensorflow/</guid>
      <description>1. What is tensorflow and why would you use it?   tensorflow is a machine learning framework
  which has APIs to Python, C++ and R
  and let&amp;rsquo;s you evaluate any machine learning algorithm, especially deep learning:
  quickly (all the computations are performed in C++)
  easily - you can view your results in a GUI - Tensorboard
  on a huge amount of data, as tensorflow scales easily to many machines and can even make use of GPU.</description>
    </item>
    
    <item>
      <title>spark</title>
      <link>https://greysweater42.github.io/spark/</link>
      <pubDate>Fri, 23 Nov 2018 12:58:49 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/spark/</guid>
      <description>1. What is spark and why would use use it?   Spark is a smooth framework for working with big data, i.e. hdfs;
  it can be accessed from Python, R, scala (spark is actually written in scala) and java;
  it is probably the most popular big data tool nowadays for data scientists.
  2. A few &amp;ldquo;Hello World&amp;rdquo; examples a) pyspark Prerequisites Installation of pyspark In this tutorial we will work on a development python version of spark.</description>
    </item>
    
    <item>
      <title>logging</title>
      <link>https://greysweater42.github.io/logging/</link>
      <pubDate>Sat, 20 Oct 2018 00:15:21 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/logging/</guid>
      <description>1. What is logging and why would you use it?   Logging, in general, sends information about the execution of a program to the outside of the program, e.g. to stdout or to a file. Why would that be useful?
  You may get the information of how and when the program was executed, e.g. who was using it&amp;rsquo;s functionalities and if all the pieces of your program finished correctly.</description>
    </item>
    
    <item>
      <title>sqlAlchemy</title>
      <link>https://greysweater42.github.io/sqlalchemy/</link>
      <pubDate>Sat, 25 Aug 2018 16:22:07 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/sqlalchemy/</guid>
      <description>1. What is sqlAlchemy and why would you use it?   sqlAlchemy is a python module that enables you to connect to and use sql databases without writing code in sql;
  using sqlAlchemy has several advantages:
  you will avoid using long sql strings in your code, which are difficult to read without syntax highlighting (unless you keep you sql queries in separate sql files);
  you are not vulnerable to sql injection attacks anymore;</description>
    </item>
    
    <item>
      <title>airflow</title>
      <link>https://greysweater42.github.io/airflow/</link>
      <pubDate>Tue, 14 Aug 2018 11:51:12 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/airflow/</guid>
      <description>1. What is airflow and why would you use it?  airflow manages dataflow as a graph (direct acyclic graph or DAG), which consists of separate tasks, and schedule them   Wait, you may say, I can do that with cron!
 Yes, you can, but with airflow:
  airflow implements a well-known pipeline design pattern with DAGs, which are data engineer&amp;rsquo;s workhorses
  you can easily divide your app into smaller tasks and monitor their reliability and execution duration</description>
    </item>
    
    <item>
      <title>flask</title>
      <link>https://greysweater42.github.io/flask/</link>
      <pubDate>Mon, 13 Aug 2018 20:19:17 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/flask/</guid>
      <description>1. What is flask and why would you use it?   flask is a python framwework for creating web applications and apis;
  it provides a full and simple support for backend, while you still create the frontend with html+css+javascript.
  For production use it is not as popular as Django, as id does not scale that well to huge projects. However in data science you will not create such huge webservices and flask, with it&amp;rsquo;s simplicity, reliability, clearness and great community support is more than enough.</description>
    </item>
    
    <item>
      <title>pyenv, virtualenv, freeze</title>
      <link>https://greysweater42.github.io/pyenv/</link>
      <pubDate>Sun, 12 Aug 2018 15:32:40 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/pyenv/</guid>
      <description>1. What are pyenv, virtualenv and freeze and why would you use them?   these three Python packages let you install your favourite Python version with your favourite Python packages&amp;rsquo; versions on any machine independently to those already installed on the system; you can even store many Python versions and Python packages&amp;rsquo; versions;
  pyenv let&amp;rsquo;s you install any Python version you like;
  virtualenv let&amp;rsquo;s you install any Python&amp;rsquo;s package version you like;</description>
    </item>
    
    <item>
      <title>decorators</title>
      <link>https://greysweater42.github.io/decorators/</link>
      <pubDate>Sun, 12 Aug 2018 15:30:35 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/decorators/</guid>
      <description>1. What are decorators and why would you use them?  decorators in Python are special functions that take a function as an argument and slightly change itâ€™s behaviour, e.g.Â itâ€™s return value;
 you can write your own decorators, which is rather easy (I highly recommend Fluent Python as a reference)
 but there are already many useful decorators available in Python.
  I am not going to describe here how to write your own decorator as, to be honest, I used them only twice in my career.</description>
    </item>
    
    <item>
      <title>testing</title>
      <link>https://greysweater42.github.io/testing/</link>
      <pubDate>Sun, 04 Feb 2018 12:02:23 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/testing/</guid>
      <description>1. What is testing and why would you do it?   testing or test-driven development (TDD) is a discipline, which relies on writing a test for every functionality before creating it (in reality you often end up writing tests afterwards)
  at first the test will fail, as we have not provided the proper functionality yet. Our goal is to fulfill this functionality, so the test will pass (in reality you usually write tests so that later you can code more&amp;hellip; inattentively, and tests point out your mistakes before reaching pruduction environment)</description>
    </item>
    
    <item>
      <title>ggplot2</title>
      <link>https://greysweater42.github.io/ggplot2/</link>
      <pubDate>Fri, 24 Mar 2017 09:03:49 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/ggplot2/</guid>
      <description>1. What is ggplot2 and why would you use it?  ggplot2 is an R package which makes creating nice-looking plots easy;
 the plots you create are highly customizable;
  Once you learn ggplot2, you will not make any production plots using basic R. However, due to itâ€™s verbosity, for simple exploratory analysis I still use basic functions: plot, lines, hist and boxplot.</description>
    </item>
    
  </channel>
</rss>