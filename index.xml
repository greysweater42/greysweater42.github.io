<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>greaysweater42&#39;s cookbook</title>
    <link>https://greysweater42.github.io/</link>
    <description>Recent content on greaysweater42&#39;s cookbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 31 Aug 2021 18:32:03 +0200</lastBuildDate>
    
	<atom:link href="https://greysweater42.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PCA / SVD</title>
      <link>https://greysweater42.github.io/pca/</link>
      <pubDate>Tue, 31 Aug 2021 18:32:03 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/pca/</guid>
      <description>1. What ic PCA and why do we care? PCA stands for Principal Component Analysis and is a clever linear transformation, which usually serves the following purposes:
  dimenstionality reduction (in case of tabular data and text processing)
  noise reduction (in image and signal preprocessing)
  It is worth mentioning that SVD (Singular Value Decomposition) is a generalization of PCA, so in practice these are exactly the same methods.</description>
    </item>
    
    <item>
      <title>fiat 126 v ferrari</title>
      <link>https://greysweater42.github.io/fiat_ferrari/</link>
      <pubDate>Thu, 20 May 2021 16:40:46 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/fiat_ferrari/</guid>
      <description>1. Can you tell the difference between these two cars?    Me neither, but let&amp;rsquo;s see if a convolutional neural network can.
2. What am I doing? I am practicing my CNN skills on a subject that is particularly close to my heart: a legendary vehicle Fiat 126p in which I was travelling around Poland with my family in the 1990s. To me this was the best car in the world and it left many cars behind in various categories, mainly styling and&amp;hellip; well, styling.</description>
    </item>
    
    <item>
      <title>keras</title>
      <link>https://greysweater42.github.io/keras/</link>
      <pubDate>Thu, 08 Apr 2021 18:19:38 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/keras/</guid>
      <description>1. What is keras and why would you still use pytorch?   Just kidding with pytorch ;) but still you will have to choose between these two (or even more) frameworks at the very early stage of the analysis.
  Keras is a high-level framework for working with neural networks, written in Python and capable of running on top of either TensorFlow, Microsoft Cognitive Toolkit (CNTK) or Theano</description>
    </item>
    
    <item>
      <title>fastai</title>
      <link>https://greysweater42.github.io/fastai/</link>
      <pubDate>Wed, 03 Mar 2021 18:26:08 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/fastai/</guid>
      <description>1. What is fastai and why would you care? It is a deep learning framework built on top of pytorch, which facilitates some frequently used tasks, e.g.:
  you can train your model in one line of code (and it works really well)
  you can easily view your dataset, which is particularly useful when working with images
  you can easily check where the model had the biggest errors.</description>
    </item>
    
    <item>
      <title>mlops</title>
      <link>https://greysweater42.github.io/mlops/</link>
      <pubDate>Wed, 17 Feb 2021 16:56:08 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/mlops/</guid>
      <description>This is not a proper blog post yet, just my notes, hence it is in &amp;ldquo;scratchpad&amp;rdquo; category.
 1. What and why 2. DVC 3. mlflow  disclaimer: This is just my opinion. I believe that measuring performance in data science is extremely difficult. When we hire employees, we strive to quantify their skills as if it was possible to create an embedding of a person in a form of a vector or even a scalar.</description>
    </item>
    
    <item>
      <title>pytorch</title>
      <link>https://greysweater42.github.io/pytorch/</link>
      <pubDate>Wed, 17 Feb 2021 16:13:51 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/pytorch/</guid>
      <description>1. What is pytorch and why is it interesting?   Pytorch is one of the most popular artificial neural network python packages, used mainly for deep learning.
  Comparing to other NN frameworks, pytorch:
  makes using CUDA trivial
  has excellent abstractions for working with neural networks (dataset, dataloader, nn.Module)
  works well with Tensorboard
    2. A typical NN structure Pytorch NN scripts share a very similar structure: many models used in production environment are even almost exactly the same.</description>
    </item>
    
    <item>
      <title>XAI</title>
      <link>https://greysweater42.github.io/xai/</link>
      <pubDate>Sun, 22 Nov 2020 12:38:18 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/xai/</guid>
      <description>1. Why even bother explaining machine learning models?   users will trust the model which explains their decisions not only because of this
  you will gain insight on whether the model will perform well on new data, e.g. you may find out that the decision if a photo depicts a husky or a dachshund is based not on features of a dog but on snow that lays all around.</description>
    </item>
    
    <item>
      <title>xgboost</title>
      <link>https://greysweater42.github.io/xgboost/</link>
      <pubDate>Sat, 14 Nov 2020 13:34:53 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/xgboost/</guid>
      <description>1. What is XGBoost and why would you use it?   xgboost is one of the most popular supervised learning algorithms
  it&amp;rsquo;s popularity results from a few factors:
  it&amp;rsquo;s easy to use
  is available in R and Python, with sklearn api
  usually performs very well even on default hyperparameters
  is resilient to missing values and ourliers
  provides excellect results</description>
    </item>
    
    <item>
      <title>linux tools</title>
      <link>https://greysweater42.github.io/linux_tools/</link>
      <pubDate>Wed, 05 Feb 2020 11:31:21 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/linux_tools/</guid>
      <description>htop a good explanation
a more detailed explanation
the linux command line book p. 113 - top, which is an older brother of htop</description>
    </item>
    
    <item>
      <title>bash</title>
      <link>https://greysweater42.github.io/bash/</link>
      <pubDate>Sun, 19 Jan 2020 14:31:25 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/bash/</guid>
      <description>1. What is bash and why would you use it?   bash is a Unix shell and commmand language, which makes performing any task you want on Unix/Linux system programatically
  anything you&amp;rsquo;ve ever done using OS GUI can be done with bash. The main benefit is the possibility to automate any task and keep track of its changes with git
  2. Why am I writing this tutorial?</description>
    </item>
    
    <item>
      <title>beautiful soup</title>
      <link>https://greysweater42.github.io/beautiful_soup/</link>
      <pubDate>Fri, 11 Oct 2019 19:38:20 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/beautiful_soup/</guid>
      <description>1. What is beautiful soup and why would you use it?   it&amp;rsquo;s a web scraping Python package
  sometimes your data is allocated on various pages on the internet. Beautiful Soup turns out to be super-helpful in automated collecting of this sort of data.
  btw. I love the name. It sounds so randomly.
2. The basics Beautiful Soup can &amp;ldquo;understand&amp;rdquo; html code, which you download from the internet using requests module:</description>
    </item>
    
    <item>
      <title>heroku</title>
      <link>https://greysweater42.github.io/heroku/</link>
      <pubDate>Tue, 13 Aug 2019 19:10:08 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/heroku/</guid>
      <description>1. What is heroku and why would you use it?   heroku is a platform which lets you run your django app on a server for free. Or at least this is how I use it ;)
  available at heroku.com
  2. Curiosities   deployment of your app is very simple. You write yor code, test it locally and push to the repo. The app is automatically deployed, as long as you set heroku to be one of your remote git repos.</description>
    </item>
    
    <item>
      <title>learning tensorflow</title>
      <link>https://greysweater42.github.io/learning_tensorflow/</link>
      <pubDate>Mon, 05 Aug 2019 18:45:18 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/learning_tensorflow/</guid>
      <description>The best way to gain intuiton to any new thing you learn is to start from a very beginning and play with it (let&amp;rsquo;s see what happens if I do this). That&amp;rsquo;s the power of reinforcement learning ;)
These packages will be useful in the nearest future:
import numpy as np from sklearn.datasets import load_iris from sklearn.linear_model import LinearRegression from sklearn.preprocessing import OneHotEncoder from sklearn.metrics import accuracy_score import tensorflow as tf A trivial example of tensorflow:</description>
    </item>
    
    <item>
      <title>writing a cookbook</title>
      <link>https://greysweater42.github.io/cookbook/</link>
      <pubDate>Fri, 26 Jul 2019 17:58:33 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/cookbook/</guid>
      <description>1. Why writing a cookbook/blog? In 2016, when I decided to become a data scientist, I was overwhelmed by the number of skills I had to possess to start this sort of career. Reading job offers convinced me that I should be a specialist in:
  statistics and mathematics (which I learned at the univerity),
  machine learning and data mining (which are fairly easy to learn by yourself if you have a statistical background),</description>
    </item>
    
    <item>
      <title>tensorflow_serving</title>
      <link>https://greysweater42.github.io/tensorflow_serving/</link>
      <pubDate>Fri, 31 May 2019 15:29:17 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/tensorflow_serving/</guid>
      <description>#!/usr/bin/python3 import tensorflow as tf from tensorflow.python.saved_model import builder as saved_model_builder from tensorflow.python.saved_model import signature_constants from tensorflow.python.saved_model import signature_def_utils from tensorflow.python.saved_model import tag_constants from tensorflow.python.saved_model.utils import build_tensor_info placeholder_name = &#39;a&#39; operation_name = &#39;add&#39; a = tf.placeholder(tf.int32, name=placeholder_name) b = tf.constant(10) # This is our model add = tf.add(a, b, name=operation_name) with tf.Session() as sess: # super complicated model ten_plus_two = sess.run(add, feed_dict={a: 2}) print(&#39;10 + 2 = {}&#39;.format(ten_plus_two)) # od tego momentu robimy wszystko, zeby zapisac model # inputy i outputy chcemy przetworzyc do zapisywalnego formatu # najpierw robimy z nich tensory a_tensor = sess.</description>
    </item>
    
    <item>
      <title>basic machine learning algorithms</title>
      <link>https://greysweater42.github.io/ml/</link>
      <pubDate>Mon, 22 Apr 2019 18:05:21 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/ml/</guid>
      <description>1. What is machine learning and why would you use it?   it&amp;rsquo;s a rather complicated, yet beautiful tool for boldly going where no man has gone before.
  in other words, it enables you to extract valuable information from data.
  2. Examples of the most popular machine learning algorithms in Python and R We&amp;rsquo;ll be working on iris dataset, which is easily available in Python (from sklearn import datasets; datasets.</description>
    </item>
    
    <item>
      <title>featuretools</title>
      <link>https://greysweater42.github.io/featuretools/</link>
      <pubDate>Thu, 07 Feb 2019 11:27:29 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/featuretools/</guid>
      <description># This is not a proper blog post yet, just my notes. featuretools (TODO)
 https://blog.featurelabs.com/deep-feature-synthesis/
https://towardsdatascience.com/why-automated-feature-engineering-will-change-the-way-you-do-machine-learning-5c15bf188b96
https://docs.featuretools.com/#minute-quick-start
https://blog.featurelabs.com/featuretools-on-spark-2/</description>
    </item>
    
    <item>
      <title>cassandra</title>
      <link>https://greysweater42.github.io/cassandra/</link>
      <pubDate>Tue, 05 Feb 2019 17:33:24 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/cassandra/</guid>
      <description># This is not a proper blog post yet, just my notes. cassandra (TODO)
 Installation is described on the cassandra webpage, but it didn&amp;rsquo;t work for me, so I&amp;rsquo;ve decided to use cassandra&amp;rsquo;s docker image.
This is a very nice tutorial of setting up a 3-node cluster of cassandra od docker, creating a simple table, populating it with data and retrieving results.
Looks like a decent example of using cassandra on (docker with python)[https://mannekentech.</description>
    </item>
    
    <item>
      <title>passing arguments to scripts</title>
      <link>https://greysweater42.github.io/passing_arguments/</link>
      <pubDate>Tue, 05 Feb 2019 09:34:23 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/passing_arguments/</guid>
      <description># This is not a proper blog post yet, just my notes. passing arguments (TODO)
 caffee
R A good article on passing arguments to R scripts
You can read the docs of commandArgs for more info, but the general use is very simple:
args &amp;lt;- commandArgs(trailingOnly = TRUE) print(args) # args is a vector of values Rscript file.R one two 3 If trailingOnly is set to FALSE, args will contain some other argument values, e.</description>
    </item>
    
    <item>
      <title>caffee</title>
      <link>https://greysweater42.github.io/caffee/</link>
      <pubDate>Sun, 06 Jan 2019 19:44:53 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/caffee/</guid>
      <description># This is not a proper blog post yet, just my notes. caffee (TODO)
 caffee</description>
    </item>
    
    <item>
      <title>theano</title>
      <link>https://greysweater42.github.io/theano/</link>
      <pubDate>Sun, 06 Jan 2019 19:36:46 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/theano/</guid>
      <description># This is not a proper blog post yet, just my notes. theano (TODO)
 theano vs tensorflow</description>
    </item>
    
    <item>
      <title>pytorch basics</title>
      <link>https://greysweater42.github.io/pytorch_basics/</link>
      <pubDate>Sun, 06 Jan 2019 17:44:32 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/pytorch_basics/</guid>
      <description>1. What is pytorch and why would you use it?   pytorch is a python package which makes learning deep neaural networks relatively easy and fast
  it&amp;rsquo;s main &amp;ldquo;rival&amp;rdquo; is tensorflow, as pytorch was released by Facebook, but tensorflow by Google
  More on pytorch you will find in this post.
2. &amp;ldquo;Hello world&amp;rdquo; example  inspired by this article
  using pytorch version x.xx</description>
    </item>
    
    <item>
      <title>tensorflow</title>
      <link>https://greysweater42.github.io/tensorflow/</link>
      <pubDate>Tue, 01 Jan 2019 18:17:38 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/tensorflow/</guid>
      <description>1. What is tensorflow and why would you use it?   tensorflow is a machine learning framework
  which has APIs to Python, C++ and R
  and let&amp;rsquo;s you evaluate any machine learning algorithm, especially deep learning:
  quickly (all the computations are performed in C++)
  easily - you can view your results in a GUI - Tensorboard
  on a huge amount of data, as tensorflow scales easily to many machines and can even make use of GPU.</description>
    </item>
    
    <item>
      <title>rstanarm</title>
      <link>https://greysweater42.github.io/rstanarm/</link>
      <pubDate>Sun, 23 Dec 2018 20:19:18 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/rstanarm/</guid>
      <description>1. What is rstanarm and why would you use it?   it&amp;rsquo;s an R interface to stan
  it&amp;rsquo;s better than rstan, because (according to rstanarm webpage)
  models are specified with formula syntax,
  data is provided as a data frame, and
  additional arguments are available to specify priors.
    in a nutshell, rstanarm let&amp;rsquo;s you estimate various Bayesian models and examine them with shinystan.</description>
    </item>
    
    <item>
      <title>nlp</title>
      <link>https://greysweater42.github.io/nlp/</link>
      <pubDate>Sun, 23 Dec 2018 15:44:02 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/nlp/</guid>
      <description>1. What is nlp and why should you care?   NLP or natural language processing (not neuro-linguistic programming. This disambiguation makes searching on the internet a real pain) is a group of methods/algorithms that deal with text data. Sounds like text mining? The former concentrates more on predictive modeling, while the latter on exploratory data analysis. In practice some of the algorithms may be used both for prediction and exploration (LDA, for example).</description>
    </item>
    
    <item>
      <title>rocker</title>
      <link>https://greysweater42.github.io/rocker/</link>
      <pubDate>Sun, 16 Dec 2018 15:47:35 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/rocker/</guid>
      <description>1. What is rocker and why would you use it?   rocker is docker container specially prepared for working with R programming language;
  it is useful if your R model is a part of a microservice system based on docker containers;
  you can run R/shiny-server/rstudio-server on any machine you want. The only requirement is docker.
  2. Rocker versions An official site of rocker proposes a few versions of r images.</description>
    </item>
    
    <item>
      <title>hadoop</title>
      <link>https://greysweater42.github.io/hadoop/</link>
      <pubDate>Tue, 04 Dec 2018 21:32:35 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/hadoop/</guid>
      <description>1. What is hadoop and why would you use it?   hadoop is the first popular big data tool ever;
  it let&amp;rsquo;s you &amp;ldquo;quickly&amp;rdquo; compute huge amounts of data thanks to dividing computation into many machines (a cluster of machines); &amp;ldquo;quickly&amp;rdquo; comparing to a standard, one-machine approach;
  you can store and easily access huge amounts of data thanks to hadoop&amp;rsquo;s distributed file system (hdfs);
  in general, hadoop is a cornerstone of big data.</description>
    </item>
    
    <item>
      <title>git</title>
      <link>https://greysweater42.github.io/git/</link>
      <pubDate>Mon, 03 Dec 2018 15:01:35 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/git/</guid>
      <description>1. What is git and why would you use it?   Git is a totally basic program if you think seriously about programming. Seriously.
  It&amp;rsquo;s a version control system, which makes:
  working on the same project with many people simple;
  remembers the whole history of the projects, i.e. all it&amp;rsquo;s chages as long as you follow git&amp;rsquo;s discipline
    2. A &amp;ldquo;Hello world&amp;rdquo; example As you may have noticed, my posts usually contain a section called &amp;lsquo;A &amp;ldquo;Hello World&amp;rdquo; example&amp;rsquo;, but not this time.</description>
    </item>
    
    <item>
      <title>spark</title>
      <link>https://greysweater42.github.io/spark/</link>
      <pubDate>Fri, 23 Nov 2018 12:58:49 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/spark/</guid>
      <description>1. What is spark and why would use use it?   Spark is a smooth framework for working with big data, i.e. hdfs;
  it can be accessed from Python, R, scala (spark is actually written in scala) and java;
  it is probably the most popular big data tool nowadays for data scientists.
  2. A few &amp;ldquo;Hello World&amp;rdquo; examples a) pyspark Prerequisites Installation of pyspark In this tutorial we will work on a development python version of spark.</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://greysweater42.github.io/hugo/</link>
      <pubDate>Fri, 09 Nov 2018 23:01:35 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/hugo/</guid>
      <description># This is not a proper blog post yet, just my notes. hugo (TODO)
 A short tutorial
A really good introductory film:
 And a &amp;hellip;
Clone your favourite theme do /themes
Update config.toml based on the themes&amp;rsquo; website
moving your site to Amazon S3
Why would you do this?
  you want to have your own domain, like tomis9.com, not tomis9.github.io
  you want to find out what Amazon offers for cloud computing - this is a good training project</description>
    </item>
    
    <item>
      <title>redis</title>
      <link>https://greysweater42.github.io/redis/</link>
      <pubDate>Sun, 21 Oct 2018 20:49:20 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/redis/</guid>
      <description># This is not a proper blog post yet, just my notes. redis (TODO)
 docker pull redis import redis import pandas as pd # https://www.youtube.com/watch?v=Hbt56gFj998 # https://redis-py.readthedocs.io/en/latest/ # open up a redis-server session in redis/src/redis-server redis_host = &amp;quot;localhost&amp;quot; redis_port = 6379 redis_password = &amp;quot;&amp;quot; r = redis.StrictRedis(host=redis_host, port=redis_port, password=redis_password, decode_responses=True) r.flushall() # save data to redis d = {key: str(value) for key, value in zip(list(&#39;abcdefghij&#39;), range(10))} for key, value in d.</description>
    </item>
    
    <item>
      <title>logging</title>
      <link>https://greysweater42.github.io/logging/</link>
      <pubDate>Sat, 20 Oct 2018 00:15:21 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/logging/</guid>
      <description>1. What is logging and why would you use it?   Logging, in general, sends information about the execution of a program to the outside of the program, e.g. to stdout or to a file. Why would that be useful?
  You may get the information of how and when the program was executed, e.g. who was using it&amp;rsquo;s functionalities and if all the pieces of your program finished correctly.</description>
    </item>
    
    <item>
      <title>sqlAlchemy</title>
      <link>https://greysweater42.github.io/sqlalchemy/</link>
      <pubDate>Sat, 25 Aug 2018 16:22:07 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/sqlalchemy/</guid>
      <description>1. What is sqlAlchemy and why would you use it?   sqlAlchemy is a python module that enables you to connect to and use sql databases without writing code in sql;
  using sqlAlchemy has several advantages:
  you will avoid using long sql strings in your code, which are difficult to read without syntax highlighting (unless you keep you sql queries in separate sql files);
  you are not vulnerable to sql injection attacks anymore;</description>
    </item>
    
    <item>
      <title>gitlab-ci</title>
      <link>https://greysweater42.github.io/gitlab_ci/</link>
      <pubDate>Tue, 21 Aug 2018 17:56:38 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/gitlab_ci/</guid>
      <description># This is not a proper blog post yet, just my notes. gitlab-ci (TODO)
 or gitlab Continuous Integration &amp;amp; Deployment/Continuous Delivery
link to documentation
example of use in python and flask
how aboout installing gitlab locally?
https://medium.com/90seconds/continuous-integration-and-deployment-for-data-pipelines-at-90-seconds-53bf10521ea7</description>
    </item>
    
    <item>
      <title>kafka</title>
      <link>https://greysweater42.github.io/kafka/</link>
      <pubDate>Sat, 18 Aug 2018 14:33:57 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/kafka/</guid>
      <description># This is not a proper blog post yet, just my notes. kafka (TODO)
 kafka tutorial
A gentle Introduction to Stream Processing
Kafka on docker</description>
    </item>
    
    <item>
      <title>marathon</title>
      <link>https://greysweater42.github.io/marathon/</link>
      <pubDate>Sat, 18 Aug 2018 14:24:14 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/marathon/</guid>
      <description># This is not a proper blog post yet, just my notes. marathon (TODO)
 marathon If you want to have Marathon up and running, follow this tutorial.</description>
    </item>
    
    <item>
      <title>vagrant</title>
      <link>https://greysweater42.github.io/vagrant/</link>
      <pubDate>Tue, 14 Aug 2018 14:25:43 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/vagrant/</guid>
      <description>1. What is vagrant and why would you use it?   Vagrant let&amp;rsquo;s you setup and use virtual machines easily and quickly.
  You store full configuration of your VM in one text file (Vagrantfile), which makes it easily portable and trackable with git(hub).
  Vagrant may be useful for testing new tools and software. It&amp;rsquo;s more convenient than a traditional VM with a full GUI.
  2.</description>
    </item>
    
    <item>
      <title>airflow</title>
      <link>https://greysweater42.github.io/airflow/</link>
      <pubDate>Tue, 14 Aug 2018 11:51:12 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/airflow/</guid>
      <description>1. What is airflow and why would you use it?  airflow lets you manage your dataflow as a graph (direct acyclic graph or DAG), wchich consists of separate Tasks, and schedule them   Wait, you may say, I can do that with cron!
 Yes, you can, but with airflow:
  you can easily divide your app into smaller tasks and monitor their reliability and execution duration;</description>
    </item>
    
    <item>
      <title>flask</title>
      <link>https://greysweater42.github.io/flask/</link>
      <pubDate>Mon, 13 Aug 2018 20:19:17 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/flask/</guid>
      <description>1. What is flask and why would you use it?   flask is a python framwework for creating web applications and apis;
  it provides a full and simple support for backend, while you still create the frontend with html+css+javascript.
  For production use it is not as popular as Django, as id does not scale that well to huge projects. However in data science you will not create such huge webservices and flask, with it&amp;rsquo;s simplicity, reliability, clearness and great community support is more than enough.</description>
    </item>
    
    <item>
      <title>pyenv, virtualenv, freeze</title>
      <link>https://greysweater42.github.io/pyenv/</link>
      <pubDate>Sun, 12 Aug 2018 15:32:40 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/pyenv/</guid>
      <description>1. What are pyenv, virtualenv and freeze and why would you use them?   these three Python packages let you install your favourite Python version with your favourite Python packages&amp;rsquo; versions on any machine independently to those already installed on the system; you can even store many Python versions and Python packages&amp;rsquo; versions;
  pyenv let&amp;rsquo;s you install any Python version you like;
  virtualenv let&amp;rsquo;s you install any Python&amp;rsquo;s package version you like;</description>
    </item>
    
    <item>
      <title>mesos</title>
      <link>https://greysweater42.github.io/mesos/</link>
      <pubDate>Sun, 12 Aug 2018 15:29:44 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/mesos/</guid>
      <description>1. What is Mesos and why would you use it?   It lets you setup and manage a cluster of machines &amp;ldquo;easily&amp;rdquo; (when you know how to use it, which is not very straightforward).
  combined with Marathon it provides you with a nice interface to setup and manage docker containers and even build a whole system based on a microservice architecture.
  2. Useful links   A quick introduction to Apache Mesos</description>
    </item>
    
    <item>
      <title>docker</title>
      <link>https://greysweater42.github.io/docker/</link>
      <pubDate>Sun, 12 Aug 2018 15:29:16 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/docker/</guid>
      <description>1. What is docker and why would you use it?   &amp;ldquo;In simpler words, Docker is a tool that allows developers, sys-admins etc. to easily deploy their applications in a sandbox (called containers) to run on the host operating system i.e. Linux.&amp;rdquo; Comparing to Python, it&amp;rsquo;s basically a virtualenv, but for the whole OS. Or this is some sort of a virtual machine;
  it&amp;rsquo;s a program, which lets you to encapsulate your software into its own, the most basic &amp;ldquo;OS&amp;rdquo; (known as &amp;ldquo;container&amp;rdquo; in docker&amp;rsquo;s world) and run it on any machine/server, which has docker installed;</description>
    </item>
    
    <item>
      <title>rTags</title>
      <link>https://greysweater42.github.io/rtags/</link>
      <pubDate>Sun, 11 Feb 2018 13:47:00 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/rtags/</guid>
      <description>1. What are rTags and why would you use them? rTags let you jump directly to the definition of a function under your cursor. Modern IDE&amp;rsquo;s provide this functionality, so why wouldn&amp;rsquo;t you have it in vim?
2. How to use them? You don&amp;rsquo;t necessarily have to read the articles from #3 (unless you want to understand what you are doing). All you have to do is run :RBuildTags, Nvim-R will create a tags file in your current directory and vim will automatically read this file each time you open any .</description>
    </item>
    
    <item>
      <title>C in R</title>
      <link>https://greysweater42.github.io/cinr/</link>
      <pubDate>Tue, 06 Feb 2018 22:07:51 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/cinr/</guid>
      <description>1. Why would you extend R with C language?   some parts of your program may run too slowly. One of the possible solutions is to rewrite them into C;
  if you create a library and you want it to be extremely fast, you will probably end up writing most of your functions in C.;
  it&amp;rsquo;s worth learning even the basic example, as most basic R functions are written in C.</description>
    </item>
    
    <item>
      <title>packages</title>
      <link>https://greysweater42.github.io/packages/</link>
      <pubDate>Sun, 04 Feb 2018 12:06:07 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/packages/</guid>
      <description>1. What are R packages and why would you use them?   R packaging is a convenient way to store and share your R code.
  It lets you incorporate testing with testthat specially prepared tools (you can use testthat without creating a package, but it&amp;rsquo;s slightly more complicated).
  It lets you easily list dependencies with packrat. You can also achieve this without using a package.</description>
    </item>
    
    <item>
      <title>testing</title>
      <link>https://greysweater42.github.io/testing/</link>
      <pubDate>Sun, 04 Feb 2018 12:02:23 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/testing/</guid>
      <description>1. What is testing and why would you use it?   testing or test-driven development (TDD) is a discipline, which relies on writing a test for every functionality before creating it;
  at first the test will fail, as we have not provided the proper functionality yet. Our goal is to fulfill this functionality, so the test will pass.
  In reality you modify your tests as you create the functionality or even write the tests after you are finished writing it.</description>
    </item>
    
    <item>
      <title>shiny</title>
      <link>https://greysweater42.github.io/shiny/</link>
      <pubDate>Fri, 24 Mar 2017 09:13:23 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/shiny/</guid>
      <description>1. What is shiny and why would you use it?  shiny is an R package that let&amp;rsquo;s you create dynamic web applications without any knowledge of html, css and javascript, php etc. Pure R.  Sounds like a dream?
  Advantages:
  easy to learn the basics;
  easy to set up.
    Disadvantages:
  scalability;
  performance;
  in order to make the application work the way you want to, you have to involve javascript, html and css.</description>
    </item>
    
  </channel>
</rss>