<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on greaysweater42&#39;s cookbook</title>
    <link>https://greysweater42.github.io/tags/r/</link>
    <description>Recent content in R on greaysweater42&#39;s cookbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 23 Dec 2018 20:19:18 +0100</lastBuildDate>
    
	<atom:link href="https://greysweater42.github.io/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>rstanarm</title>
      <link>https://greysweater42.github.io/rstanarm/</link>
      <pubDate>Sun, 23 Dec 2018 20:19:18 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/rstanarm/</guid>
      <description>1. What is rstanarm and why would you use it?   it&amp;rsquo;s an R interface to stan
  it&amp;rsquo;s better than rstan, because (according to rstanarm webpage)
  models are specified with formula syntax,
  data is provided as a data frame, and
  additional arguments are available to specify priors.
    in a nutshell, rstanarm let&amp;rsquo;s you estimate various Bayesian models and examine them with shinystan.</description>
    </item>
    
    <item>
      <title>rocker</title>
      <link>https://greysweater42.github.io/rocker/</link>
      <pubDate>Sun, 16 Dec 2018 15:47:35 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/rocker/</guid>
      <description>1. What is rocker and why would you use it?   rocker is docker container specially prepared for working with R programming language;
  it is useful if your R model is a part of a microservice system based on docker containers;
  you can run R/shiny-server/rstudio-server on any machine you want. The only requirement is docker.
  2. Rocker versions An official site of rocker proposes a few versions of r images.</description>
    </item>
    
    <item>
      <title>spark</title>
      <link>https://greysweater42.github.io/spark/</link>
      <pubDate>Fri, 23 Nov 2018 12:58:49 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/spark/</guid>
      <description>1. What is spark and why would use use it?   Spark is a smooth framework for working with big data, i.e. hdfs;
  it can be accessed from Python, R, scala (spark is actually written in scala) and java;
  it is probably the most popular big data tool nowadays for data scientists.
  2. A few &amp;ldquo;Hello World&amp;rdquo; examples a) pyspark Prerequisites Installation of pyspark In this tutorial we will work on a development python version of spark.</description>
    </item>
    
    <item>
      <title>logging</title>
      <link>https://greysweater42.github.io/logging/</link>
      <pubDate>Sat, 20 Oct 2018 00:15:21 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/logging/</guid>
      <description>1. What is logging and why would you use it?   Logging, in general, sends information about the execution of a program to the outside of the program, e.g. to stdout or to a file. Why would that be useful?
  You may get the information of how and when the program was executed, e.g. who was using it&amp;rsquo;s functionalities and if all the pieces of your program finished correctly.</description>
    </item>
    
    <item>
      <title>rTags</title>
      <link>https://greysweater42.github.io/rtags/</link>
      <pubDate>Sun, 11 Feb 2018 13:47:00 +0200</pubDate>
      
      <guid>https://greysweater42.github.io/rtags/</guid>
      <description>1. What are rTags and why would you use them? rTags let you jump directly to the definition of a function under your cursor. Modern IDE&amp;rsquo;s provide this functionality, so why wouldn&amp;rsquo;t you have it in vim?
2. How to use them? You don&amp;rsquo;t necessarily have to read the articles from #3 (unless you want to understand what you are doing). All you have to do is run :RBuildTags, Nvim-R will create a tags file in your current directory and vim will automatically read this file each time you open any .</description>
    </item>
    
    <item>
      <title>C in R</title>
      <link>https://greysweater42.github.io/cinr/</link>
      <pubDate>Tue, 06 Feb 2018 22:07:51 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/cinr/</guid>
      <description>1. Why would you extend R with C language?   some parts of your program may run too slowly. One of the possible solutions is to rewrite them into C;
  if you create a library and you want it to be extremely fast, you will probably end up writing most of your functions in C.;
  it&amp;rsquo;s worth learning even the basic example, as most basic R functions are written in C.</description>
    </item>
    
    <item>
      <title>packages</title>
      <link>https://greysweater42.github.io/packages/</link>
      <pubDate>Sun, 04 Feb 2018 12:06:07 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/packages/</guid>
      <description>1. What are R packages and why would you use them?   R packaging is a convenient way to store and share your R code.
  It lets you incorporate testing with testthat specially prepared tools (you can use testthat without creating a package, but it&amp;rsquo;s slightly more complicated).
  It lets you easily list dependencies with packrat. You can also achieve this without using a package.</description>
    </item>
    
    <item>
      <title>testing</title>
      <link>https://greysweater42.github.io/testing/</link>
      <pubDate>Sun, 04 Feb 2018 12:02:23 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/testing/</guid>
      <description>1. What is testing and why would you use it?   testing or test-driven development (TDD) is a discipline, which relies on writing a test for every functionality before creating it;
  at first the test will fail, as we have not provided the proper functionality yet. Our goal is to fulfill this functionality, so the test will pass.
  In reality you modify your tests as you create the functionality or even write the tests after you are finished writing it.</description>
    </item>
    
    <item>
      <title>shiny</title>
      <link>https://greysweater42.github.io/shiny/</link>
      <pubDate>Fri, 24 Mar 2017 09:13:23 +0100</pubDate>
      
      <guid>https://greysweater42.github.io/shiny/</guid>
      <description>1. What is shiny and why would you use it?  shiny is an R package that let&amp;rsquo;s you create dynamic web applications without any knowledge of html, css and javascript, php etc. Pure R.  Sounds like a dream?
  Advantages:
  easy to learn the basics;
  easy to set up.
    Disadvantages:
  scalability;
  performance;
  in order to make the application work the way you want to, you have to involve javascript, html and css.</description>
    </item>
    
  </channel>
</rss>